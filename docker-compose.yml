version: '3.8'

services:
  # 研究API服务
  research-api:
    build:
      context: ./api
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/research_db
      - REDIS_URL=redis://redis:6379/0
      - CHROMADB_HOST=chromadb
      - CHROMADB_PORT=8001
      - LOG_LEVEL=INFO
      # API密钥从环境变量读取
      - PERPLEXITY_API_KEY=${PERPLEXITY_API_KEY}
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
      - QWEN_API_KEY=${QWEN_API_KEY}
    depends_on:
      - postgres
      - redis
      - chromadb
    networks:
      - research-network
    restart: unless-stopped
    volumes:
      - ./api/logs:/app/logs

  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=research_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - research-network
    restart: unless-stopped

  # Redis缓存和消息队列
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - research-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # ChromaDB向量数据库
  chromadb:
    image: chromadb/chroma:latest
    ports:
      - "8001:8000"
    environment:
      - CHROMA_SERVER_AUTH_CREDENTIALS_PROVIDER=chromadb.auth.token.TokenAuthCredentialsProvider
      - CHROMA_SERVER_AUTH_CREDENTIALS_FILE=/chroma/credentials
      - CHROMA_SERVER_AUTH_TOKEN_TRANSPORT_HEADER=X-Chroma-Token
    volumes:
      - chromadb_data:/chroma/chroma
      - ./chroma/credentials:/chroma/credentials
    networks:
      - research-network
    restart: unless-stopped

  # Celery异步任务队列
  celery-worker:
    build:
      context: ./api
      dockerfile: Dockerfile
    command: celery -A app.celery_app worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/research_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    depends_on:
      - postgres
      - redis
    networks:
      - research-network
    restart: unless-stopped
    volumes:
      - ./api/logs:/app/logs

  # Celery监控 (可选)
  flower:
    build:
      context: ./api
      dockerfile: Dockerfile
    command: celery -A app.celery_app flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    depends_on:
      - redis
    networks:
      - research-network
    restart: unless-stopped

  # Nginx反向代理 (生产环境)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - research-api
    networks:
      - research-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  chromadb_data:

networks:
  research-network:
    driver: bridge