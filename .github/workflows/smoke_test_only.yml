name: smoke-test-isolated

on:
  push:
    branches: [ main, master ]
  workflow_dispatch: {}

env:
  # API Keys (Optional for smoke test - will use mock mode if missing)
  PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}
  QWEN_API_KEY: ${{ secrets.QWEN_API_KEY }}
  SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
  SMTP_PORT: ${{ secrets.SMTP_PORT }}
  SMTP_USER: ${{ secrets.SMTP_USER }}
  SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
  
  # Smoke test mode - allows scripts to run without real APIs
  SMOKE_TEST_MODE: "true"

jobs:
  smoke-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install system dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y graphviz

      - name: Install python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install graphviz python-dotenv openai requests

      - name: Runtime Usage Detection
        run: |
          echo "=== Step 1: Runtime Usage Detection ==="
          echo "🔍 Creating runtime monitor for actual usage detection..."
          python3 -c "
          import os
          import sys
          import json
          from pathlib import Path
          
          print('🔧 设置运行时追踪...')
          
          # 模拟运行时导入检测 (基于实际代码分析)
          detected_modules = []
          error_modules = []
          
          # 检测 oop 模块可导入性
          sys.path.insert(0, str(Path('oop').resolve()))
          oop_modules = ['config', 'model_manager', 'search_manager', 'email_manager', 'component_manager']
          
          for module in oop_modules:
              try:
                  exec(f'import {module}')
                  detected_modules.append(f'oop/{module}.py')
                  print(f'✅ {module}: 可导入')
              except Exception as e:
                  error_modules.append(f'oop/{module}.py: {str(e)[:50]}')
                  print(f'❌ {module}: {str(e)[:50]}')
          
          # 检测 api 模块
          api_modules = ['app.main', 'app.core.config', 'app.models.research']
          for module in api_modules:
              try:
                  exec(f'import {module}')
                  detected_modules.append(f'api/{module.replace(\".\", \"/\")}.py')
                  print(f'✅ {module}: 可导入')
              except Exception as e:
                  error_modules.append(f'api/{module}: {str(e)[:50]}')
                  print(f'❌ {module}: {str(e)[:50]}')
          
          # 保存运行时检测结果
          os.makedirs('runtime_detection', exist_ok=True)
          
          runtime_data = {
              'detected_modules': detected_modules,
              'error_modules': error_modules,
              'total_detected': len(detected_modules),
              'total_errors': len(error_modules)
          }
          
          with open('runtime_detection/used_paths.json', 'w') as f:
              json.dump({'python_files': [str(Path(m).resolve()) for m in detected_modules]}, f, indent=2)
          
          with open('runtime_detection/detection_report.json', 'w') as f:
              json.dump(runtime_data, f, indent=2)
          
          print(f'📊 运行时检测完成: {len(detected_modules)} 个可用模块, {len(error_modules)} 个错误模块')
          "

      - name: Test UML Generation with Runtime Data
        env:
          MONITOR_USED_PATHS: ${{ github.workspace }}/runtime_detection/used_paths.json
        run: |
          echo "=== Step 2: UML Generation with Runtime Detection ==="
          echo "🎨 使用运行时检测数据生成 UML..."
          python pictures/UML/uml_generator.py
          ls -la pictures/UML/output/

      - name: Test DFD Generation with Runtime Data
        env:
          MONITOR_USED_PATHS: ${{ github.workspace }}/runtime_detection/used_paths.json
        run: |
          echo "=== Step 3: DFD Generation with Runtime Detection ==="
          echo "📊 使用运行时检测数据生成 DFD..."
          python pictures/DFD/dfd_generator.py
          ls -la pictures/DFD/output/

      - name: Upload smoke test results
        uses: actions/upload-artifact@v4
        with:
          name: smoke-test-artifacts
          path: |
            pictures/UML/output/**
            pictures/DFD/output/**

      - name: Generate test summary
        run: |
          echo "## 🧪 堆烟测试结果" >> $GITHUB_STEP_SUMMARY
          echo "### UML 生成测试" >> $GITHUB_STEP_SUMMARY
          if [ -f "pictures/UML/output/uml_diagram.png" ]; then
            echo "✅ UML PNG 生成成功" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ UML PNG 生成失败" >> $GITHUB_STEP_SUMMARY
          fi
          if [ -f "pictures/UML/output/analysis_report.json" ]; then
            echo "✅ UML 分析报告生成成功" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
            head -20 pictures/UML/output/analysis_report.json >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ UML 分析报告生成失败" >> $GITHUB_STEP_SUMMARY
          fi
          echo "### DFD 生成测试" >> $GITHUB_STEP_SUMMARY
          if [ -f "pictures/DFD/output/system_level_dfd.png" ]; then
            echo "✅ DFD PNG 生成成功" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ DFD PNG 生成失败" >> $GITHUB_STEP_SUMMARY
          fi
