name: Verify GitHub Secrets Configuration

on:
  workflow_dispatch:
    inputs:
      run_full_test:
        description: '运行完整API测试'
        required: false
        default: false
        type: boolean

jobs:
  verify-secrets:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      
    - name: 🐍 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: 📦 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🔍 验证GitHub Secrets配置
      env:
        DASHSCOPE_API_KEY: ${{ secrets.DASHSCOPE_API_KEY }}
        QWEN_API_KEY: ${{ secrets.QWEN_API_KEY }}
        PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}
        SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
        SMTP_USER: ${{ secrets.SMTP_USER }}
        SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
        EMAIL_TO: ${{ secrets.EMAIL_TO }}
        GITHUB_ACTIONS: true
      run: |
        echo "🔧 开始验证GitHub Secrets配置..."
        python tests/verify_github_secrets.py
        
    - name: 🧪 运行完整API测试
      if: ${{ inputs.run_full_test }}
      env:
        DASHSCOPE_API_KEY: ${{ secrets.DASHSCOPE_API_KEY }}
        QWEN_API_KEY: ${{ secrets.QWEN_API_KEY }}
        PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}
        SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
        SMTP_USER: ${{ secrets.SMTP_USER }}
        SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
        EMAIL_TO: ${{ secrets.EMAIL_TO }}
      run: |
        echo "🚀 运行完整API连通性测试..."
        python tests/test_api.py || echo "⚠️ API测试需要运行中的服务器"
        
    - name: 🤖 测试统一模型管理器
      env:
        DASHSCOPE_API_KEY: ${{ secrets.DASHSCOPE_API_KEY }}
        QWEN_API_KEY: ${{ secrets.QWEN_API_KEY }}
        PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}
      run: |
        echo "🧠 测试统一模型管理器..."
        python -c "
        import sys
        sys.path.append('.')
        try:
            from oop.model_manager import model_manager
            status = model_manager.get_model_status()
            print(f'✅ 模型管理器正常 - {len(status)} 个模型已注册')
            for alias, info in status.items():
                print(f'   • {alias}: {info.get(\"model_id\", \"unknown\")}')
        except Exception as e:
            print(f'❌ 模型管理器错误: {e}')
            sys.exit(1)
        "
        
    - name: 📋 生成配置报告
      run: |
        echo "## 🔧 GitHub Secrets 配置验证报告" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔑 API密钥状态" >> $GITHUB_STEP_SUMMARY
        echo "| 密钥名称 | 状态 | 说明 |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|------|------|" >> $GITHUB_STEP_SUMMARY
        
        # 检查DASHSCOPE_API_KEY
        if [ -n "${{ secrets.DASHSCOPE_API_KEY }}" ]; then
          echo "| DASHSCOPE_API_KEY | ✅ 已配置 | 千问官方API密钥 |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| DASHSCOPE_API_KEY | ❌ 未配置 | 千问官方API密钥 |" >> $GITHUB_STEP_SUMMARY
        fi
        
        # 检查PERPLEXITY_API_KEY
        if [ -n "${{ secrets.PERPLEXITY_API_KEY }}" ]; then
          echo "| PERPLEXITY_API_KEY | ✅ 已配置 | Perplexity搜索API |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| PERPLEXITY_API_KEY | ❌ 未配置 | Perplexity搜索API |" >> $GITHUB_STEP_SUMMARY
        fi
        
        # 检查QWEN_API_KEY
        if [ -n "${{ secrets.QWEN_API_KEY }}" ]; then
          echo "| QWEN_API_KEY | ✅ 已配置 | 千问API (兼容) |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| QWEN_API_KEY | ⚪ 未配置 | 千问API (兼容) |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📧 邮件配置" >> $GITHUB_STEP_SUMMARY
        echo "| 配置项 | 状态 |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|------|" >> $GITHUB_STEP_SUMMARY
        
        # 检查邮件配置
        if [ -n "${{ secrets.SMTP_SERVER }}" ]; then
          echo "| SMTP_SERVER | ✅ 已配置 |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| SMTP_SERVER | ⚪ 未配置 |" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -n "${{ secrets.SMTP_USER }}" ]; then
          echo "| SMTP_USER | ✅ 已配置 |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| SMTP_USER | ⚪ 未配置 |" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -n "${{ secrets.EMAIL_TO }}" ]; then
          echo "| EMAIL_TO | ✅ 已配置 |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| EMAIL_TO | ⚪ 未配置 |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🎯 下一步操作" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # 根据配置状态给出建议
        if [ -n "${{ secrets.DASHSCOPE_API_KEY }}" ] && [ -n "${{ secrets.PERPLEXITY_API_KEY }}" ]; then
          echo "✅ **API密钥配置完整！** 可以运行以下工作流：" >> $GITHUB_STEP_SUMMARY
          echo "- 🧠 **Unified Training**: ChromaDB向量数据库训练" >> $GITHUB_STEP_SUMMARY
          echo "- 🔍 **Simple Research Automation**: 征信信息自动搜索" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **请完成API密钥配置：**" >> $GITHUB_STEP_SUMMARY
          echo "1. 访问 [API密钥配置指南](../docs/API_KEYS_SETUP_GUIDE.md)" >> $GITHUB_STEP_SUMMARY
          echo "2. 在 Settings → Secrets and variables → Actions 中添加密钥" >> $GITHUB_STEP_SUMMARY
          echo "3. 重新运行此验证工作流" >> $GITHUB_STEP_SUMMARY
        fi